library(readxl)
data <- read_excel("C:/Users/admin/Downloads/updated_data.xlsx")
View(data)
install.packages("MatchIt")
library(readxl)
library(dplyr)
library(MatchIt)
library(plm)
install.packages("plm")
library(readxl)
library(dplyr)
library(MatchIt)
library(plm)
# 将日期列转换为Date类型
data$Date <- as.Date(data$Date)
# 假设 `post` 列是处理变量
# 创建一个时间变量
data <- data %>% mutate(time = ifelse(Date >= as.Date("YYYY-MM-DD"), 1, 0))
# 假设需要匹配的变量是 `P/E (Diluted, Incl. EI)` 和 `Net Profit Margin`
# 你可以根据实际情况选择变量
matching_vars <- c("P/E (Diluted, Incl. EI)", "Net Profit Margin")
# 执行PSM
m.out <- matchit(post ~ `P/E (Diluted, Incl. EI)` + `Net Profit Margin`, data = data, method = "nearest")
rlang::last_trace()
# 获取匹配后的数据
matched_data <- match.data(m.out)
rlang::last_trace(drop = FALSE)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/a.xlsx")
View(data)
# install.packages("GGally")
library(GGally)
install.packages("GGally")
install.packages("GGally")
library(GGally)
ggpairs(data,                 # Data frame
columns = 1:4,        # Columns
aes(color = Species,  # Color by group (cat. variable)
alpha = 0.5))
ggpairs(data)     # Transparency
ggpairs(data, columns = 1:4, aes(color = Species, alpha = 0.5),
upper = list(continuous = wrap("cor", size = 2.5)))
rlang::last_trace()
ggpairs(data, columns = 1:4, aes(color = GAI, alpha = 0.5),
upper = list(continuous = wrap("cor", size = 2.5)))
ggpairs(data, columns = 1:4, aes(color = GAI, alpha = 0.5),
upper = list(continuous = "points"))
ggpairs(data,
mapping = aes(color = GAI),  # 设置颜色映射，假设 GAI 是一个二元变量
upper = list(continuous = "points"),  # 设置上三角部分为散点图
lower = list(continuous = "smooth"),  # 设置下三角部分为平滑曲线图
diag = list(continuous = "barDiag"),  # 设置对角线为直方图
title = "Correlation Matrix",  # 设置图的标题
legend = "right",  # 将图例放在右侧
ggplot2::scale_color_manual(values = c("#00AFBB", "#E7B800")),  # 手动设置颜色映射
ggplot2::theme_minimal()  # 使用简约主题
)
wrap(ggpairs,
data = data,
mapping = aes(color = GAI),  # 设置颜色映射，假设 GAI 是一个二元变量
upper = list(continuous = "points"),  # 设置上三角部分为散点图
lower = list(continuous = "smooth"),  # 设置下三角部分为平滑曲线图
diag = list(continuous = "barDiag"),  # 设置对角线为直方图
title = "Correlation Matrix",  # 设置图的标题
legend = "right",  # 将图例放在右侧
ggplot2::scale_color_manual(values = c("#00AFBB", "#E7B800")),  # 手动设置颜色映射
ggplot2::theme_minimal()  # 使用简约主题
)
help("wrap", package = "GGally")
wrap(ggpairs,
data = data,
mapping = aes(color = GAI),  # 设置颜色映射，假设 GAI 是一个二元变量
upper = list(continuous = "points"),  # 设置上三角部分为散点图
lower = list(continuous = "smooth"),  # 设置下三角部分为平滑曲线图
diag = list(continuous = "barDiag"),  # 设置对角线为直方图
title = "Correlation Matrix",  # 设置图的标题
legend = "right",  # 将图例放在右侧
scales = "free",  # 自由缩放
axisLabels = "show",  # 显示轴标签
ggplot2::scale_color_manual(values = c("#00AFBB", "#E7B800")),  # 手动设置颜色映射
ggplot2::theme_minimal()  # 使用简约主题
)
wrap(ggpairs,
data = data,
mapping = aes(color = GAI),  # 设置颜色映射，假设 GAI 是一个二元变量
upper = list(continuous = "points"),  # 设置上三角部分为散点图
lower = list(continuous = "smooth"),  # 设置下三角部分为平滑曲线图
diag = list(continuous = "barDiag"),  # 设置对角线为直方图
title = "Correlation Matrix",  # 设置图的标题
legend = "right",  # 将图例放在右侧
scales = "free",  # 自由缩放
axisLabels = "show",  # 显示轴标签
colour = c("#00AFBB", "#E7B800"),  # 设置颜色映射，这里假设 GAI 是一个二元变量
theme = ggplot2::theme_minimal()  # 使用简约主题
)
# 加载 corrplot 包，如果没有安装，需要先安装：install.packages("corrplot")
library(corrplot)
install.packages("corrplot")
library(corrplot)
# 计算相关系数矩阵
cor_matrix <- cor(data)
# 绘制相关性矩阵图
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, diag = FALSE)
# 检查并处理缺失值
# 例如，这里假设用均值填充缺失值
data <- data.frame(lapply(data, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x)))
# 重新计算相关系数矩阵
cor_matrix <- cor(data)
# 加载 corrplot 包
library(corrplot)
# 绘制相关性矩阵图
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, diag = FALSE)
# 添加标题
title("Correlation Matrix of Variables")
# 假设你的数据框名为data
# 将GAI变量转换为因子（分类变量）
data$GAI <- as.factor(data$GAI)
# 计算相关性矩阵（排除分类变量）
cor_matrix <- cor(data[, sapply(data, is.numeric)], use = "complete.obs")
# 绘制相关性矩阵图
corrplot(cor_matrix, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8, addCoef.col = "black")
# 绘制相关性矩阵图
ggcorrplot(cor_matrix,
method = "circle",
type = "upper",
lab = TRUE,
lab_size = 3,
title = "Correlation Matrix of Financial Variables",
ggtheme = ggplot2::theme_minimal())
# 加载所需的包
library(ggcorrplot)
# 安装所需的包
install.packages("ggcorrplot")
# 加载所需的包
library(ggcorrplot)
library(dplyr)
# 绘制相关性矩阵图
ggcorrplot(cor_matrix,
method = "circle",
type = "upper",
lab = TRUE,
lab_size = 3,
title = "Correlation Matrix of Financial Variables",
ggtheme = ggplot2::theme_minimal())
# 将GAI变量转换为因子（分类变量）
data$GAI <- as.factor(data$GAI)
# 计算相关性矩阵（包括二元变量）
# 对于GAI二元变量，计算点双列相关系数
data_numeric <- data %>% select_if(is.numeric)
cor_matrix <- cor(data_numeric, use = "complete.obs")
# 使用GGally包的ggpairs函数绘制相关性图
p <- ggpairs(data,
upper = list(continuous = "cor", combo = "box_no_facet", discrete = "ratio"),
lower = list(continuous = "smooth", combo = "dot_no_facet", discrete = "facetbar"),
diag = list(continuous = "densityDiag", discrete = "barDiag"),
ggplot2::aes(colour = GAI))
# 美化图表
p <- p + theme_minimal() +
labs(title = "Correlation Matrix of Financial Variables including GAI") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
ggsave("correlation_matrix.png", plot = p, width = 16, height = 12, units = "in", dpi = 300)
library(GGally)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# 将GAI变量转换为因子（分类变量）
data$GAI <- as.factor(data$GAI)
# 使用GGally包的ggpairs函数绘制相关性图
p <- ggpairs(data,
upper = list(continuous = wrap("cor", size = 4), combo = wrap("box_no_facet", size = 0.5), discrete = "ratio"),
lower = list(continuous = wrap("smooth", size = 0.5), combo = wrap("dot_no_facet", size = 0.5), discrete = "facetbar"),
diag = list(continuous = wrap("densityDiag", alpha = 0.5), discrete = wrap("barDiag", size = 0.5)),
ggplot2::aes(colour = GAI, fill = GAI))
# 美化图表
p <- p + theme_minimal(base_size = 12) +
labs(title = "Correlation Matrix of Financial Variables including GAI") +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
# 调整图像尺寸并保存为文件
ggsave("correlation_matrix.png", plot = p, width = 16, height = 12, units = "in", dpi = 300)
# 打印图像
print(p)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/data.xlsx")
View(data)
install.packages("mice")
library(mice)
# 进行多重插补
# 选择插补方法，默认方法是pmm（predictive mean matching）
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 进行多重插补
# 选择插补方法，默认方法是pmm（predictive mean matching）
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
# 查看插补结果的概述
summary(imputed_data)
# 查看插补后的数据
completed_data <- complete(imputed_data, 1)
print("插补后的数据框：")
print(completed_data)
library(openxlsx)
install.packages("openxlsx")
library(mice)
library(openxlsx)
# 将插补后的数据导出到一个 Excel 文件
write.xlsx(completed_data, file = "imputed_data.xlsx", rowNames = FALSE)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/data.xlsx")
View(data)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 选择插补方法，默认方法是pmm（predictive mean matching）
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
# 查看插补结果的概述
summary(imputed_data)
# 查看插补后的数据
completed_data <- complete(imputed_data, 1)
print("插补后的数据框：")
print(completed_data)
# 将插补后的数据导出到一个 Excel 文件
write.xlsx(completed_data, file = "imputed_data.xlsx", rowNames = FALSE)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/data.xlsx")
View(data)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 进行多重插补
# 选择插补方法，默认方法是pmm（predictive mean matching）
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
# 查看插补结果的概述
summary(imputed_data)
# 查看插补后的数据
completed_data <- complete(imputed_data, 1)
print("插补后的数据框：")
print(completed_data)
# 将插补后的数据导出到一个 Excel 文件
write.xlsx(completed_data, file = "imputed_data.xlsx", rowNames = FALSE)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/data.xlsx")
View(data)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 进行多重插补
# 选择插补方法，默认方法是pmm（predictive mean matching）
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
# 查看插补结果的概述
summary(imputed_data)
# 查看插补后的数据
completed_data <- complete(imputed_data, 1)
print("插补后的数据框：")
print(completed_data)
# 将插补后的数据导出到一个 Excel 文件
write.xlsx(completed_data, file = "imputed_data.xlsx", rowNames = FALSE)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/data.xlsx")
View(data)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 进行多重插补
# 选择插补方法，默认方法是pmm（predictive mean matching）
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 进行多重插补
# 选择插补方法，默认方法是pmm（predictive mean matching）
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 查看缺失值比例
missing_percentage <- colSums(is.na(data)) / nrow(data) * 100
print(missing_percentage)
# 删除缺失值比例超过50%的变量
data <- data[, missing_percentage < 50]
# 查看变量之间的相关系数矩阵
cor_matrix <- cor(data, use = "pairwise.complete.obs")
print(cor_matrix)
# 找出相关系数绝对值大于0.9的变量对，并删除其中一个变量
high_cor_pairs <- which(abs(cor_matrix) > 0.9, arr.ind = TRUE)
high_cor_pairs <- high_cor_pairs[high_cor_pairs[,1] != high_cor_pairs[,2],]
# 删除其中一个变量
vars_to_remove <- unique(high_cor_pairs[,2])
data <- data[,-vars_to_remove]
# 再次进行多重插补
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 5, seed = 500)
install.packages("caret")
library(mice)
library(openxlsx)
library(caret)
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 查看缺失值比例
missing_percentage <- colSums(is.na(data)) / nrow(data) * 100
print(missing_percentage)
# 删除缺失值比例超过50%的变量
data <- data[, missing_percentage < 50]
# 删除缺失值较多的行（例如超过一半变量缺失）
data <- data[rowSums(is.na(data)) <= (ncol(data) / 2), ]
# 通过近似线性依赖检查多重共线性，并删除高度共线性的变量
linear_combinations <- findLinearCombos(data)
# 加载数据（假设数据已加载到变量data中）
# 处理列名，确保没有特殊字符和空格
names(data) <- make.names(names(data))
# 查看缺失值比例
missing_percentage <- colSums(is.na(data)) / nrow(data) * 100
print(missing_percentage)
# 删除缺失值比例超过50%的变量
data <- data[, missing_percentage < 50]
# 删除缺失值较多的行（例如超过一半变量缺失）
data <- data[rowSums(is.na(data)) <= (ncol(data) / 2), ]
# 对剩余缺失值进行简单插补（如用均值填充），以便进行共线性检测
data_imputed <- data
for (i in 1:ncol(data_imputed)) {
if (any(is.na(data_imputed[, i]))) {
data_imputed[is.na(data_imputed[, i]), i] <- mean(data_imputed[, i], na.rm = TRUE)
}
}
# 通过近似线性依赖检查多重共线性，并删除高度共线性的变量
linear_combinations <- findLinearCombos(data_imputed)
# 查看数据集缺失值情况
md.pattern(data)
# 使用mice进行多重插补
# m 指定插补次数，默认值是5
# meth 指定插补方法，默认会自动选择合适方法
# maxit 指定最大迭代次数，默认是5
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 50, seed = 500)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/data.xlsx")
View(data)
# 查看数据集缺失值情况
md.pattern(data)
# 使用mice进行多重插补
# m 指定插补次数，默认值是5
# meth 指定插补方法，默认会自动选择合适方法
# maxit 指定最大迭代次数，默认是5
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 50, seed = 500)
# 清理列名
colnames(data) <- make.names(colnames(data), unique = TRUE)
# 检查数据类型并转换因素类型为字符类型（如果有必要）
data[] <- lapply(data, function(x) if (is.factor(x)) as.character(x) else x)
# 查看数据集缺失值情况
md.pattern(data)
# 使用mice进行多重插补
# m 指定插补次数，默认值是5
# method 指定插补方法，默认会自动选择合适方法
# maxit 指定最大迭代次数，默认是5
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 50, seed = 500)
# 清理列名
colnames(data) <- make.names(colnames(data), unique = TRUE)
# 检查数据类型并转换因素类型为字符类型（如果有必要）
data[] <- lapply(data, function(x) if (is.factor(x)) as.character(x) else x)
# 检查和处理高度共线性的变量
cor_matrix <- cor(data, use = "pairwise.complete.obs")
high_cor <- findCorrelation(cor_matrix, cutoff = 0.9)
if (length(high_cor) > 0) {
data <- data[, -high_cor]
}
# 检查和移除完全相同的行或列
data <- data[!duplicated(data), ]
data <- data[, !duplicated(t(data))]
# 查看数据集缺失值情况
md.pattern(data)
# 使用mice进行多重插补
# m 指定插补次数，默认值是5
# method 指定插补方法，默认会自动选择合适方法
# maxit 指定最大迭代次数，默认是5
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 50, seed = 500)
library(mice)
library(openxlsx)
library(caret)
library(dplyr)
# 清理列名
colnames(data) <- make.names(colnames(data), unique = TRUE)
# 检查数据类型并转换因素类型为字符类型（如果有必要）
data[] <- lapply(data, function(x) if (is.factor(x)) as.character(x) else x)
# 检查和处理高度共线性的变量
cor_matrix <- cor(data, use = "pairwise.complete.obs")
high_cor <- findCorrelation(cor_matrix, cutoff = 0.9)
if (length(high_cor) > 0) {
data <- data[, -high_cor]
}
# 检查和移除完全相同的行或列
data <- data[!duplicated(data), ]
data <- data[, !duplicated(t(data))]
# 标准化数据
preProcValues <- preProcess(data, method = c("center", "scale"))
data <- predict(preProcValues, data)
# 查看数据集缺失值情况
md.pattern(data)
# 使用mice进行多重插补
# m 指定插补次数，默认值是5
# method 指定插补方法，默认会自动选择合适方法
# maxit 指定最大迭代次数，默认是5
imputed_data <- mice(data, m = 5, method = 'pmm', maxit = 50, seed = 500)
library(readxl)
data <- read_excel("C:/Users/admin/Desktop/data.xlsx")
View(data)
# 加载必要的包
library(VIM)
# 假设数据集为data，并且包含缺失值
# 使用kNN函数进行插补，默认k值为5
data_imputed <- kNN(data)
# 查看插补后的数据
print(data_imputed)
# 将插补后的数据导出到Excel文件
write.xlsx(data_imputed, file = "data_imputed.xlsx")
# 安装自定义R包
install.packages("NewsScraper_0.1.0.tar.gz", repos = NULL, type = "source")
# 加载并测试R包
library(NewsScraper)
# 调用主函数
scrape_company_news(
file_path = "id.xlsx",  # 请确保文件路径正确
start_date = "2022-01-01",
end_date = "2024-5-31",
keywords = '"generative AI" OR "generative artificial intelligence" OR "natural language generation" OR "NLG" OR "large language model" OR "LLM" OR "transformer model" OR "text generation" OR "image generation" OR "content generation" OR "automated content creation"',
language = "en",
country = "US",
output_file = "All_news_within_date_range.xlsx"
)
# 调用主函数
scrape_company_news(
file_path = "C:/Users/admin/Desktop/id.xlsx",  # 请确保文件路径正确
start_date = "2022-01-01",
end_date = "2024-5-31",
keywords = '"generative AI" OR "generative artificial intelligence" OR "natural language generation" OR "NLG" OR "large language model" OR "LLM" OR "transformer model" OR "text generation" OR "image generation" OR "content generation" OR "automated content creation"',
language = "en",
country = "US",
output_file = "All_news_within_date_range.xlsx"
)
# 调用主函数
scrape_company_news(
file_path = "C:/Users/admin/Desktop/id.xlsx",  # 请确保文件路径正确
start_date = "2022-01-01",
end_date = "2024-5-31",
keywords = '"generative AI" OR "generative artificial intelligence" OR "natural language generation" OR "NLG" OR "large language model" OR "LLM" OR "transformer model" OR "text generation" OR "image generation" OR "content generation" OR "automated content creation"',
language = "en",
country = "US",
output_file = "All_news_within_date_range.xlsx"
)
# 调用主函数
scrape_company_news(
file_path = "C:/Users/admin/Desktop/id.xlsx",  # 请确保文件路径正确
start_date = "2022-01-01",
end_date = "2024-5-31",
keywords = '"generative AI" OR "generative artificial intelligence" OR "natural language generation" OR "NLG" OR "large language model" OR "LLM" OR "transformer model" OR "text generation" OR "image generation" OR "content generation" OR "automated content creation"',
language = "en",
country = "US",
output_file = "All_news_within_date_range.xlsx"
)
# 调用主函数
scrape_company_news(
file_path = "C:/Users/admin/Desktop/id.xlsx",  # 请确保文件路径正确
start_date = "2022-01-01",
end_date = "2024-5-31",
keywords = '"generative AI" OR "generative artificial intelligence" OR "natural language generation" OR "NLG" OR "large language model" OR "LLM" OR "transformer model" OR "text generation" OR "image generation" OR "content generation" OR "automated content creation"',
language = "en",
country = "US",
output_file = "All_news_within_date_range.xlsx"
)
library(usethis)
create_package("DynamicNetSim")
library(devtools)
document()
library(roxygen2)
roxygenise()
setwd("D:/Rrun/DynamicNetSim")
roxygenise()
library(devtools)
build()
check()
check()
check()
check()
use_description(
fields = list(
Title = "A Package for Dynamic Network Simulation",
Description = "This package provides tools for simulating dynamic networks and game-theoretic interactions.",
`Authors@R` = "person('LING', email = 'LingYUAN1201@outlook.com', role = c('aut', 'cre'))",
License = "MIT"
)
)
use_namespace()
export(gen_dynamic)
roxygenise()
build()
check()
build()
check()
library(usethis)
use_mit_license("LING")
library(roxygen2)
roxygenise()
build()
check()
library(roxygen2)
roxygenise()
build()
check()
library(roxygen2)
roxygenise()
build()
check()
